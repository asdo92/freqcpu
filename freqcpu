#!/bin/bash

# Configuration file
config_file=/etc/freqcpu/freqcpu.conf

# Default config
cores_cpu=$(grep -c ^processor /proc/cpuinfo 2> /dev/null)
freq_min="2000Mhz"
freq_max="3600Mhz"
governor=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor 2> /dev/null | head -1)
#governor=powersave

# Check dependencies
dependencies_not_found=$(which cpupower cpufreq-set | head -1)
detected=$(basename ${dependencies_not_found} 2> /dev/null)
# Show if all tools are installed
if [ -z "$dependencies_not_found" ] ; then
  echo "$(basename $0): Dependency not found: cpupower or cpufreq-set (cpufrequtils)"
  exit 1
fi

# Function to check root permissions
function check_root() {
  mkdir -p /etc/root 2> /dev/null
  rootperm=$?
  if [ $rootperm -eq 0 ] ; then
    rm -rf /etc/root
  else
    echo "$(basename $0): Root permission is required to perform this operation"
    exit
  fi
}

function help() {
  echo ""
  if [ -f ${config_file} ] ; then
    source ${config_file}
  fi
  echo "$(basename $0) - limit CPU frequency (${detected})"
  echo ""
  echo "* Config:"
  echo "   freq_min: ${freq_min}"
  echo "   freq_max: ${freq_max}"
  echo "   cores_cpu: ${cores_cpu}"
  echo "   governor: ${governor}"
  echo ""
  echo "* Syntax:"
  echo ""
  echo "  $(basename $0) -c  --> create initial configuration file"
  echo "  $(basename $0) -d  --> run daemon for set CPU frequency"
  echo "  $(basename $0) -r  --> set limit CPU frequency"
  echo "  $(basename $0) -f  --> show current CPU frequency"
  echo "  $(basename $0) -g  --> show current CPU governor"
  echo "  $(basename $0) -o  --> show CPU cores"
  echo "  $(basename $0) -h  --> show help"
  echo ""
  exit 0
}

function create_config() {
  mkdir -p /etc/freqcpu
  echo "cores_cpu=${cores_cpu} # Set number of CPUs" > ${config_file}
  echo "freq_min=${freq_min}" >> ${config_file} 
  echo "freq_max=${freq_max}" >> ${config_file} 
  echo "governor=${governor} # Set powersave, performance, balanced" >> ${config_file}
  echo "$(basename $0): created ${config_file} successfully"
  exit 0
}

function check_config() {
  if [ -f ${config_file} ] ; then
    source ${config_file}
  else
    echo "$(basename $0): no configuration file exists in /etc/freqcpu/freqcpu.conf"
    echo "$(basename $0): first run the command -> freqcpu -c"
    exit 0
  fi
}

# Run commands
if [ "${1}" == "-d" ] ; then
  check_root
  check_config
  source ${config_file}
  echo "$(basename $0) - running limit CPU frequency daemon"
  sleep 10
  frecuency=0
  num_cpus_total=$(expr ${cores_cpu} - 1)
  num_cpu=0
  while [ ${frecuency} -eq 0 ] ; do
    while [ ${num_cpu} -le ${num_cpus_total} ] ; do
      echo "set CPU ${num_cpu} freq (${freq_min}/${freq_max}) (governor: ${governor})"
      if [ "${detected}" == "cpufreq-set" ] ; then
        cpufreq-set --cpu ${num_cpu} --min ${freq_min} --max ${freq_max} --governor ${governor}
      fi
      if [ "${detected}" == "cpupower" ] ; then
        cpupower --cpu ${num_cpu} frequency-set --min ${freq_min} --max ${freq_max} --governor ${governor}
      fi
      num_cpu=$(expr ${num_cpu} + 1)
    done
    sleep 3600
    num_cpu=0
  done
elif [ "${1}" == "-c" ] ; then
  check_root
  create_config
elif [ "${1}" == "-r" ] ; then
  check_root
  check_config
  source ${config_file}
  num_cpus_total=$(expr ${cores_cpu} - 1)
  num_cpu=0
  while [ ${num_cpu} -le ${num_cpus_total} ] ; do
    echo "set CPU ${num_cpu} freq (${freq_min}/${freq_max}) (governor: ${governor})"
    if [ "${detected}" == "cpufreq-set" ] ; then
      cpufreq-set --cpu ${num_cpu} --min ${freq_min} --max ${freq_max} --governor ${governor}
    fi
    if [ "${detected}" == "cpupower" ] ; then
      cpupower --cpu ${num_cpu} frequency-set --min ${freq_min} --max ${freq_max} --governor ${governor}
    fi
    num_cpu=$(expr ${num_cpu} + 1)
  done
elif [ "${1}" == "-f" ] ; then
  watch -n1 "cat /proc/cpuinfo | grep \"^[c]pu MHz\""
elif [ "${1}" == "-g" ] ; then
  cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor 2> /dev/null | head -1
elif [ "${1}" == "-o" ] ; then
  grep -c ^processor /proc/cpuinfo 2> /dev/null
else
  help
fi


